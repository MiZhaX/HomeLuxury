'use strict';
var path = require('path');
var gutil = require('gulp-util');
var through = require('through2');
var objectAssign = require('object-assign');
var file =require('vinyl-file');
var sortKeys = require('sort-keys');



function getManifestFile(opts, cb) {
    try{ 
        file.read(opts.path).then(
            function(){
                cb(null, manifest);
            },
            function(err,e){
                if (err) {
                    // not found
                    if (err.code === 'ENOENT') {
                        cb(null, new gutil.File(opts));
                    } else {
                        cb(err);
                    }

                    return;
                }
            })
    }catch(e){
       console&&(console.error(e))
    }

}

function getModname(contents){
      var modNameRex = /@define\s+('[^']+'|"[^"]+"|[^\s;!@#%^&*()]+)/;
      var match = contents.match(modNameRex);
      return match?match[1]:null;
}
function getDeps(contents){
    var requireRex = /(@(require)\s+)('[^']+'|"[^"]+"|[^\s;!@#%^&*()]+)/g;
    var matchs = [];
    var depsP;
    while((depsP=requireRex.exec(contents))!=null){
        matchs.push(depsP[3]);
    }
    return matchs;
}
function transformPath(filePath){
    return filePath.replace(new RegExp("\\"+path.sep+"+?","g"),'/');
}

var plugin = function () {
    var sourcemaps = [];
    var deps = []

    return through.obj(function (file, enc, cb) {
        if (file.isNull()) {
            cb(null, file);
            return;
        }

        if (file.isStream()) {
            cb(new gutil.PluginError('gulp-rev', 'Streaming not supported'));
            return;
        }

        var contents = String(file.contents);
        var modeName = getModname(contents);
        var matchs = getDeps(contents);
        
        file.revOrigPath = file.path;
        file.revOrigBase = file.base;
        
        for(var i in matchs){
            matchs [i] =  transformPath(path.relative(file.base, path.join(path.dirname(file.path),matchs[i])))
        }
        if(matchs&&matchs.length>0){
            file.matchs = matchs
        }
    
        if(modeName){
             file.modName = modeName;
        }
       
        cb(null, file);
    });
};

plugin.manifest = function (pth, opts) {
    if (typeof pth === 'string') {
    }

    opts = objectAssign({
        path: 'rev-manifest.json',
        merge: false,
        // Apply the default JSON transformer.
        // The user can pass in his on transformer if he wants. The only requirement is that it should
        // support 'parse' and 'stringify' methods.
        transformer: JSON
    }, opts, pth);

    var manifest = {};

    return through.obj(function (file, enc, cb) {
        // ignore all non-rev'd files
        if (!file.path || !file.revOrigPath) {
            cb();
            return;
        }
      
        var obj = {};
        var revisionedFile = transformPath(path.relative(file.base, file.path));
        var originalFile = transformPath(path.relative(file.revOrigBase, file.revOrigPath));
       
        obj.uri = opts.cdn+revisionedFile;

        if(file.matchs){
            obj.deps = file.matchs;
        }
        if(file.modName){
            manifest[file.modName] = obj;
        }else{
            manifest[originalFile] = obj;
        }
       
        cb();
    }, function (cb) {
        // no need to write a manifest file if there's nothing to manifest
       
        if (Object.keys(manifest).length === 0) {
            cb();
            return;
        }
        
        getManifestFile(opts, function (err, manifestFile) {
            if (err) {
                cb(err);
                return;
            }
            if (opts.merge && !manifestFile.isNull()) {
                var oldManifest = {};

                try {
                    oldManifest = opts.transformer.parse(manifestFile.contents.toString());
                } catch (err) {}

                manifest = objectAssign(oldManifest, manifest);
            }

            manifestFile.contents = new Buffer(opts.transformer.stringify(sortKeys(manifest), null, '  '));
            this.push(manifestFile);
            cb();
        }.bind(this));
    });
};


module.exports = plugin;
